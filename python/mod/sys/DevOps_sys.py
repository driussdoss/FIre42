# –∑–¥–µ—Å—å –±—É–¥—É—Ç –±–æ–ª–µ–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ

#1. mini cli –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è
#!/usr/bin/env python3
import sys, os

if len(sys.argv) < 2:
    print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: deploy.py <env>")
    sys.exit(1)

env = sys.argv[1]

if env not in ["dev", "staging", "prod"]:
    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ä–µ–¥–∞:", env)
    sys.exit(1)

print(f"üöÄ –î–µ–ø–ª–æ–π –≤ —Å—Ä–µ–¥—É {env}...")
os.system(f"ansible-playbook deploy_{env}.yml")


#2. –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ python –∏ OS
import sys

if sys.version_info < (3, 10):
    print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10 –∏–ª–∏ –Ω–æ–≤–µ–µ!")
    sys.exit(1)

if sys.platform.startswith("linux"):
    print("‚úÖ Linux-—Å—Ä–µ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
else:
    print("‚ùå –ù—É–∂–µ–Ω Linux –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞")
    sys.exit(1)
#3. —Ä–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ –º–æ–¥–µ–ª—É–π sys.path
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –º–æ–¥—É–ª—è–º–∏
sys.path.append(str(Path(__file__).parent / "lib"))

from utils import docker_helper

docker_helper.deploy_container("nginx")

#4. –≤—ã–≤–æ–¥ —Å –∫–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏
import sys, os

result = os.system("kubectl get pods")

if result != 0:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ pod'–æ–≤")
    sys.exit(2)

print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
sys.exit(0)

#5. —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ stdout stderr
import sys
import subprocess

proc = subprocess.Popen(
    ["kubectl", "apply", "-f", "deployment.yml"],
    stdout=sys.stdout,
    stderr=sys.stderr
)
proc.wait()
sys.exit(proc.returncode)

#6. –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
import sys, os

if len(sys.argv) < 3:
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: backup.py <source> <destination>")
    sys.exit(1)

src, dst = sys.argv[1], sys.argv[2]
os.system(f"rsync -av {src} {dst}")

#7. —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—Å–µ–π
import sys, os

if sys.platform == "win32":
    os.system("cls")
else:
    os.system("clear")

#8. –±–µ–∑–æ–ø–∞—Å—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
import sys, subprocess

try:
    subprocess.check_call(["docker", "ps"])
except subprocess.CalledProcessError:
    print("–û—à–∏–±–∫–∞: Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
    sys.exit(1)

#9. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ stdin/stdout –¥–ª—è –ø–∞–π–ø–æ–≤
# uppercase.py
import sys

for line in sys.stdin:
    sys.stdout.write(line.upper())

#10. –≤—ã–≤–æ–¥ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
import sys
import platform

print(f"Python version: {sys.version.split()[0]}")
print(f"Platform: {sys.platform}")
print(f"Architecture: {platform.machine()}")
print(f"Executable: {sys.executable}")

