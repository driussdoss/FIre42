
# ‚òÅÔ∏è **–ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –ø–æ boto3 (DevOps-ready)**

---

## üß© 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

```bash
pip install boto3
aws configure
```

(–≤–≤–æ–¥–∏—à—å `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `region`)

---

## ‚öôÔ∏è 2. –ö–ª–∏–µ–Ω—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã

```python
import boto3

# –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (–≤—Å—ë —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã API)
ec2 = boto3.client("ec2")

# –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ä–µ—Å—É—Ä—Å (–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
s3 = boto3.resource("s3")
```

---

## üóÇÔ∏è 3. –†–∞–±–æ—Ç–∞ —Å **S3 (Storage)**

### ‚ûï –°–æ–∑–¥–∞—Ç—å –±–∞–∫–µ—Ç

```python
s3 = boto3.client("s3")
s3.create_bucket(Bucket="my-new-bucket-2025")
```

### üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª

```python
s3.upload_file("local.txt", "my-new-bucket-2025", "uploads/local.txt")
```

### üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª

```python
s3.download_file("my-new-bucket-2025", "uploads/local.txt", "downloaded.txt")
```

### üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª

```python
s3.delete_object(Bucket="my-new-bucket-2025", Key="uploads/local.txt")
```

### üßπ –£–¥–∞–ª–∏—Ç—å –±–∞–∫–µ—Ç

```python
s3.delete_bucket(Bucket="my-new-bucket-2025")
```

---

## üñ•Ô∏è 4. –†–∞–±–æ—Ç–∞ —Å **EC2 (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã)**

EC2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏: –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, —É–¥–∞–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.

---

### üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç–∞–Ω—Å–∞

```python
import boto3

ec2 = boto3.client("ec2")

instance = ec2.run_instances(
    ImageId="ami-0abcdef1234567890",  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π AMI ID
    InstanceType="t2.micro",
    MinCount=1,
    MaxCount=1,
    KeyName="my-keypair",  # –∫–ª—é—á –¥–ª—è SSH
    SecurityGroupIds=["sg-0123456789abcdef0"]
)

print("–°–æ–∑–¥–∞–Ω EC2:", instance["Instances"][0]["InstanceId"])
```

---

### üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ / –ó–∞–ø—É—Å–∫

```python
instance_id = "i-0123456789abcdef0"

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
ec2.stop_instances(InstanceIds=[instance_id])

# –ó–∞–ø—É—Å—Ç–∏—Ç—å
ec2.start_instances(InstanceIds=[instance_id])
```

---

### üßæ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

```python
response = ec2.describe_instances()
for reservation in response["Reservations"]:
    for instance in reservation["Instances"]:
        print(instance["InstanceId"], "-", instance["State"]["Name"])
```

---

### ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∏–Ω—Å—Ç–∞–Ω—Å–∞ (–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è)

‚ö†Ô∏è –ù—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–∏–ø–∞.

```python
ec2.stop_instances(InstanceIds=["i-0123456789abcdef0"])
ec2.modify_instance_attribute(
    InstanceId="i-0123456789abcdef0",
    InstanceType={"Value": "t3.micro"}
)
ec2.start_instances(InstanceIds=["i-0123456789abcdef0"])
```

---

### ‚ùå –£–¥–∞–ª–∏—Ç—å (terminate)

```python
ec2.terminate_instances(InstanceIds=["i-0123456789abcdef0"])
```

---

## üåê 5. –†–∞–±–æ—Ç–∞ —Å **ELB (Elastic Load Balancer)**

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É EC2-—Å–µ—Ä–≤–µ—Ä–∞–º–∏.

---

### ‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ (Application Load Balancer)

```python
elbv2 = boto3.client("elbv2")

response = elbv2.create_load_balancer(
    Name="my-load-balancer",
    Subnets=["subnet-0123456789abcdef0", "subnet-0abcdef1234567890"],
    SecurityGroups=["sg-0123456789abcdef0"],
    Scheme="internet-facing",
    Type="application",
    IpAddressType="ipv4"
)

print("–°–æ–∑–¥–∞–Ω ELB:", response["LoadBalancers"][0]["DNSName"])
```

---

### üéØ –°–æ–∑–¥–∞–Ω–∏–µ Target Group

```python
target_group = elbv2.create_target_group(
    Name="my-target-group",
    Protocol="HTTP",
    Port=80,
    VpcId="vpc-0123456789abcdef0"
)
```

---

### üîó –ü—Ä–∏–≤—è–∑–∫–∞ Target Group –∫ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫—É

```python
elbv2.create_listener(
    LoadBalancerArn=response["LoadBalancers"][0]["LoadBalancerArn"],
    Protocol="HTTP",
    Port=80,
    DefaultActions=[{
        "Type": "forward",
        "TargetGroupArn": target_group["TargetGroups"][0]["TargetGroupArn"]
    }]
)
```

---

## üîê 6. –†–∞–±–æ—Ç–∞ —Å **IAM (–¥–æ—Å—Ç—É–ø –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)**

### üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

```python
iam = boto3.client("iam")

users = iam.list_users()
for user in users["Users"]:
    print(user["UserName"])
```

---

### ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

```python
iam.create_user(UserName="devops_user")
```

---

### üîë –°–æ–∑–¥–∞–Ω–∏–µ access key

```python
key = iam.create_access_key(UserName="devops_user")
print(key["AccessKey"]["AccessKeyId"])
```

---

## üß© 7. –†–∞–±–æ—Ç–∞ —Å **CloudWatch (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)**

### üìà –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ CPU

```python
cloudwatch = boto3.client("cloudwatch")

metrics = cloudwatch.get_metric_statistics(
    Namespace="AWS/EC2",
    MetricName="CPUUtilization",
    Dimensions=[{"Name": "InstanceId", "Value": "i-0123456789abcdef0"}],
    StartTime=datetime.utcnow() - timedelta(hours=1),
    EndTime=datetime.utcnow(),
    Period=300,
    Statistics=["Average"]
)

for datapoint in metrics["Datapoints"]:
    print(datapoint["Timestamp"], "-", datapoint["Average"])
```

---

## üß∞ 8. –ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏—ë–º—ã –¥–ª—è DevOps

| –ó–∞–¥–∞—á–∞                              | –ú–µ—Ç–æ–¥                                            |
| ----------------------------------- | ------------------------------------------------ |
| –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö EC2 | `describe_instances()`                           |
| –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ S3      | `list_objects_v2()` + —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã        |
| –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—ç–∫–∞–ø              | `upload_file()` + timestamp –≤ –∏–º–µ–Ω–∏              |
| –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤               | —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ `LastModified` –∏ `delete_object()` |
| –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–≥—Ä—É–∑–∫–∏                 | `cloudwatch.get_metric_statistics()`             |
| –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤                   | –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ `boto3` ‚Üí CSV / JSON         |
| –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π CI/CD        | `iam.create_user()`, `iam.attach_user_policy()`  |

---

## üß© 9. –ü—Ä–∏–º–µ—Ä ¬´–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ¬ª DevOps-—Å–∫—Ä–∏–ø—Ç–∞

–°—Ü–µ–Ω–∞—Ä–∏–π: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ EC2 –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ –≤ S3.

```python
import boto3
import datetime

region = "us-east-1"
s3_bucket = "my-devops-logs"

ec2 = boto3.client("ec2", region_name=region)
s3 = boto3.client("s3")

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
instances = ec2.describe_instances()
running = [
    i["InstanceId"]
    for r in instances["Reservations"]
    for i in r["Instances"]
    if i["State"]["Name"] == "running"
]

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
if running:
    ec2.stop_instances(InstanceIds=running)
    log = f"{datetime.datetime.now()}: stopped {running}"
    print(log)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ –≤ S3
    s3.put_object(
        Bucket=s3_bucket,
        Key=f"logs/stop-{datetime.datetime.now().isoformat()}.txt",
        Body=log.encode("utf-8")
    )
```

---

## üß† –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å

| AWS –°–µ—Ä–≤–∏—Å | boto3 client                 | –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã                                               |
| ---------- | ---------------------------- | ------------------------------------------------------------- |
| S3         | `boto3.client('s3')`         | `upload_file`, `download_file`, `list_objects_v2`             |
| EC2        | `boto3.client('ec2')`        | `run_instances`, `stop_instances`, `terminate_instances`      |
| ELB        | `boto3.client('elbv2')`      | `create_load_balancer`, `create_listener`, `register_targets` |
| IAM        | `boto3.client('iam')`        | `create_user`, `list_users`, `create_access_key`              |
| CloudWatch | `boto3.client('cloudwatch')` | `get_metric_statistics`, `put_metric_data`                    |

---

–•–æ—á–µ—à—å, —è —Å–æ–±–µ—Ä—É —Ç–µ–±–µ —Å–ª–µ–¥–æ–º
üìò **30 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (10 –ø—Ä–æ—Å—Ç—ã—Ö / 10 —Å—Ä–µ–¥–Ω–∏—Ö / 10 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö)**
–ø–æ `boto3`, –≤–∫–ª—é—á–∞—è S3, EC2, ELB, IAM, CloudWatch ‚Äî –∏–º–µ–Ω–Ω–æ –≤ DevOps-—Ñ–æ—Ä–º–∞—Ç–µ (—Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã)?

